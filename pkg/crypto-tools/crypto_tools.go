package crypto_tools

import (
	"encoding/base64"
	"golang.org/x/crypto/bcrypt"
)

// StringToBase64 converts string to base64 format
func StringToBase64(input string) string {
	return base64.StdEncoding.EncodeToString([]byte(input))
}

// Base64ToString converts base64 to string
func Base64ToString(base64String string) (string, error) {
	if decodedBytes, err := base64.StdEncoding.DecodeString(base64String); err != nil {
		return "", err
	} else {
		return string(decodedBytes), nil
	}
}

// GenerateBcryptHash returns hash of the input string
func GenerateBcryptHash(input string) (string, error) {
	if hash, err := bcrypt.GenerateFromPassword([]byte(input), bcrypt.DefaultCost); err != nil {
		return "", err
	} else {
		return string(hash), nil
	}
}

// CheckHash checks if hash was generated by input
func CheckHash(hash, input string) bool {
	return bcrypt.CompareHashAndPassword([]byte(hash), []byte(input)) == nil
}
