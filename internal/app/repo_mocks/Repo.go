// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "auth-service/internal/model"
import time "time"

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// GetByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *Repo) GetByRefreshToken(ctx context.Context, refreshToken string) (model.User, time.Time, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InsertToken provides a mock function with given fields: ctx, user, token, expiresAt
func (_m *Repo) InsertToken(ctx context.Context, user model.User, token string, expiresAt time.Time) error {
	ret := _m.Called(ctx, user, token, expiresAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, string, time.Time) error); ok {
		r0 = rf(ctx, user, token, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveExpiredTokens provides a mock function with given fields: ctx
func (_m *Repo) RemoveExpiredTokens(ctx context.Context) {
	_m.Called(ctx)
}

// UpdateToken provides a mock function with given fields: ctx, oldToken, newToken, expiresAt
func (_m *Repo) UpdateToken(ctx context.Context, oldToken string, newToken string, expiresAt time.Time) error {
	ret := _m.Called(ctx, oldToken, newToken, expiresAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, oldToken, newToken, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
